[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "quantumdynamics-pro"
dynamic = ["version"]
description = "Enterprise-grade quantum dynamics framework with femtosecond precision"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "quantum",
    "dynamics", 
    "simulation",
    "physics",
    "quantum-computing",
    "quantum-mechanics",
    "hamiltonian",
    "evolution",
    "precision",
    "enterprise",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "asyncio-mqtt>=0.11.0",  # For async operations
    "pydantic>=1.8.0",       # For configuration validation
    "typing-extensions>=4.0.0",  # For enhanced type hints
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=2.5.0",  # Parallel test execution
    "hypothesis>=6.0.0",     # Property-based testing
    "coverage[toml]>=6.0.0",
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "nbsphinx>=0.8.0",       # Jupyter notebook integration
]

# Performance profiling
profiling = [
    "line-profiler>=4.0.0",
    "memory-profiler>=0.60.0",
    "py-spy>=0.3.0",
    "snakeviz>=2.1.0",
]

# Visualization dependencies
viz = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "ipywidgets>=8.0.0",
]

# Enterprise monitoring
monitoring = [
    "prometheus-client>=0.14.0",
    "opentelemetry-api>=1.12.0",
    "opentelemetry-sdk>=1.12.0",
    "structlog>=22.0.0",
]

# Production deployment
production = [
    "uvicorn[standard]>=0.18.0",  # ASGI server
    "fastapi>=0.85.0",            # REST API framework
    "redis>=4.3.0",               # Caching and session storage
    "pydantic-settings>=2.0.0",   # Settings management
]

# All dependencies for complete installation
all = [
    "quantumdynamics-pro[dev,test,docs,profiling,viz,monitoring,production]"
]

[project.urls]
Homepage = "https://github.com/username/quantumdynamics-pro"
Documentation = "https://quantumdynamics-pro.readthedocs.io"
Repository = "https://github.com/username/quantumdynamics-pro.git"
Issues = "https://github.com/username/quantumdynamics-pro/issues"
Changelog = "https://github.com/username/quantumdynamics-pro/blob/main/CHANGELOG.md"

[project.scripts]
qdp-benchmark = "quantumdynamics.scripts.benchmark:main"
qdp-validate = "quantumdynamics.scripts.validate:main"
qdp-profile = "quantumdynamics.scripts.profile:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "quantumdynamics/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["quantumdynamics"]

# Test configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=quantumdynamics",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "precision: marks tests requiring high precision",
    "gpu: marks tests requiring GPU acceleration",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration  
[tool.coverage.run]
source = ["quantumdynamics"]
omit = [
    "quantumdynamics/_version.py",
    "quantumdynamics/scripts/*",
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Black code formatter
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorter
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["quantumdynamics"]
known_third_party = ["numpy", "scipy", "pytest", "pydantic"]

# MyPy type checker
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["scipy.*", "matplotlib.*", "seaborn.*", "plotly.*"]
ignore_missing_imports = true

# Flake8 linter configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]  # Skip assert and shell usage warnings

# Pre-commit configuration
[[tool.pre-commit.repos]]
repo = "https://github.com/pre-commit/pre-commit-hooks"
rev = "v4.4.0"

  [[tool.pre-commit.repos.hooks]]
  id = "trailing-whitespace"

  [[tool.pre-commit.repos.hooks]]
  id = "end-of-file-fixer"

  [[tool.pre-commit.repos.hooks]]
  id = "check-yaml"

  [[tool.pre-commit.repos.hooks]]
  id = "check-added-large-files"

  [[tool.pre-commit.repos.hooks]]
  id = "check-merge-conflict"

[[tool.pre-commit.repos]]
repo = "https://github.com/psf/black"
rev = "22.10.0"

  [[tool.pre-commit.repos.hooks]]
  id = "black"

[[tool.pre-commit.repos]]
repo = "https://github.com/pycqa/isort"
rev = "5.11.4"

  [[tool.pre-commit.repos.hooks]]
  id = "isort"

[[tool.pre-commit.repos]]
repo = "https://github.com/pycqa/flake8"
rev = "6.0.0"

  [[tool.pre-commit.repos.hooks]]
  id = "flake8"

[[tool.pre-commit.repos]]
repo = "https://github.com/pre-commit/mirrors-mypy"
rev = "v1.0.0"

  [[tool.pre-commit.repos.hooks]]
  id = "mypy"
  additional_dependencies = ["types-all"]

# Performance benchmarking
[tool.pytest-benchmark]
min_rounds = 5
max_time = 10.0
warmup = true
warmup_iterations = 100000
disable_gc = true
sort = "mean"

# Documentation configuration
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"

# Development workflow configuration
[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "black",
    "isort",
    "flake8",
    "mypy",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=quantumdynamics {args:tests}"
cov-report = ["coverage report", "coverage html"]
lint = ["flake8 quantumdynamics tests", "black --check quantumdynamics tests", "isort --check-only quantumdynamics tests"]
format = ["black quantumdynamics tests", "isort quantumdynamics tests"]
type-check = "mypy quantumdynamics"
benchmark = "pytest tests/benchmarks/ --benchmark-only"

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme",
    "myst-parser",
    "sphinx-autodoc-typehints",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs docs/_build/html"
serve = "python -m http.server --directory docs/_build/html"