name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly precision benchmarks
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.4.2'

jobs:
  # Code quality and linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev,test]
    
    - name: Lint with flake8
      run: |
        flake8 quantumdynamics tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 quantumdynamics tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: black --check quantumdynamics tests
    
    - name: Import sorting with isort
      run: isort --check-only quantumdynamics tests
    
    - name: Type checking with mypy
      run: mypy quantumdynamics
    
    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r quantumdynamics

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[test,profiling]
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=quantumdynamics --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --maxfail=5
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[test,profiling,viz]
    
    - name: Run precision benchmarks
      run: |
        pytest tests/benchmarks/test_precision.py --benchmark-json=benchmark_precision.json
    
    - name: Run speed benchmarks  
      run: |
        pytest tests/benchmarks/test_speed.py --benchmark-json=benchmark_speed.json
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: QuantumDynamics Benchmarks
        tool: 'pytest'
        output-file-path: benchmark_precision.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true
    
    - name: Generate performance report
      run: |
        python scripts/generate_performance_report.py
    
    - name: Upload benchmark artifacts
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          benchmark_*.json
          performance_report.html

  # Precision validation (critical for quantum applications)
  precision-validation:
    name: Quantum Precision Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[test]
    
    - name: Validate femtosecond precision
      run: |
        python -c "
        from quantumdynamics import QuantumDynamicsFramework, QuantumTolerances
        import numpy as np
        
        # Initialize with strictest tolerances
        tol = QuantumTolerances(unitarity=1e-15)
        qdf = QuantumDynamicsFramework(tol)
        
        # Test basic commutator precision
        sx = np.array([[0, 1], [1, 0]], dtype=complex)
        sz = np.array([[1, 0], [0, -1]], dtype=complex)
        comm = qdf.commutator(sx, sz)
        
        theoretical = 2 * np.sqrt(2)
        actual = np.linalg.norm(comm)
        error = abs(actual - theoretical)
        
        print(f'Commutator precision: {error:.2e}')
        assert error < 1e-14, f'Precision test failed: {error:.2e}'
        
        print('✅ Quantum precision validation passed')
        "
    
    - name: Validate real quantum systems
      run: |
        python tests/validation/test_quantum_systems_precision.py

  # Documentation build and deployment
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[docs,viz]
    
    - name: Build documentation
      run: |
        sphinx-build -b html docs docs/_build/html
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker build and push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    needs: [quality, test, precision-validation]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: quantumdynamics/quantumdynamics-pro
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release management
  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quality, test, precision-validation, docs, docker]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Test package
      run: |
        pip install dist/*.whl
        python -c "import quantumdynamics; print(f'Version: {quantumdynamics.__version__}')"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          ### 🎯 Performance Improvements
          - Quantum precision: < 1e-15 unitarity error
          - Speed optimizations: Sub-millisecond evolution calculations
          - Memory efficiency: Optimized matrix operations
          
          ### 🛡️ Reliability Enhancements  
          - Enhanced error management and recovery
          - Improved monitoring and health scoring
          - Production-ready logging and configuration
          
          ### 🔬 New Features
          - Advanced quantum algorithms
          - Extended system support
          - Comprehensive validation framework
          
          **Full Changelog**: https://github.com/username/quantumdynamics-pro/compare/v1.0.0...${{ github.ref_name }}
        draft: false
        prerelease: false
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # Performance monitoring (nightly)
  nightly-monitoring:
    name: Nightly Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[test,profiling,monitoring]
    
    - name: Run comprehensive benchmarks
      run: |
        python scripts/comprehensive_benchmark.py --precision --speed --memory --all-systems
    
    - name: Generate monitoring report
      run: |
        python scripts/generate_monitoring_report.py
    
    - name: Send Slack notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#quantum-monitoring'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: "🚨 Nightly performance monitoring failed for QuantumDynamics Pro"

  # Dependency update check
  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Check for dependency updates
      run: |
        pip install pip-check-updates
        pcu requirements.txt pyproject.toml
    
    - name: Create pull request for updates
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update dependencies"
        title: "🔄 Automated Dependency Updates"
        body: |
          This PR contains automated dependency updates.
          
          Please review the changes and ensure all tests pass before merging.
        branch: dependency-updates
        delete-branch: true