name: üß™ Quantum NFT CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deploy_network:
        description: 'Network to deploy to'
        required: false
        default: 'sepolia'
        type: choice
        options:
          - sepolia
          - polygon-mumbai
          - mainnet
          - polygon

env:
  FOUNDRY_PROFILE: ci
  MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
  SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
  POLYGON_RPC_URL: ${{ secrets.POLYGON_RPC_URL }}
  MUMBAI_RPC_URL: ${{ secrets.MUMBAI_RPC_URL }}
  ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
  POLYGONSCAN_API_KEY: ${{ secrets.POLYGONSCAN_API_KEY }}

jobs:
  # ====================================
  # FOUNDRY BUILD & TEST SUITE
  # ====================================
  test:
    name: üî¨ Foundry Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: [default, gas, ci]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: üì¶ Install dependencies
        run: forge install

      - name: üèóÔ∏è Build contracts
        run: forge build --profile ${{ matrix.profile }}
        env:
          FOUNDRY_PROFILE: ${{ matrix.profile }}

      - name: üß™ Run unit tests
        run: forge test --profile ${{ matrix.profile }} -vvv
        env:
          FOUNDRY_PROFILE: ${{ matrix.profile }}

      - name: üìä Generate gas report
        if: matrix.profile == 'gas'
        run: forge test --gas-report --profile gas > gas-report-${{ github.sha }}.txt

      - name: üìà Upload gas report
        if: matrix.profile == 'gas'
        uses: actions/upload-artifact@v4
        with:
          name: gas-report-${{ github.sha }}
          path: gas-report-${{ github.sha }}.txt

  # ====================================
  # ADVANCED TESTING SUITE
  # ====================================
  advanced-testing:
    name: üß¨ Advanced Testing Suite
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üõ†Ô∏è Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: üì¶ Install dependencies
        run: forge install

      - name: üé≤ Fuzz testing (extended)
        run: |
          echo "Running extended fuzz testing..."
          forge test --fuzz-runs 50000 --match-test "testFuzz" -vv

      - name: üîÑ Invariant testing
        run: |
          echo "Running invariant testing..."
          forge test --match-test "invariant" -vvv

      - name: üç¥ Fork testing (Mainnet)
        if: github.event_name != 'pull_request'
        run: |
          echo "Running mainnet fork tests..."
          forge test --fork-url $MAINNET_RPC_URL --match-test "testFork" -vv
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}

      - name: üìä Coverage analysis
        run: |
          forge coverage --report lcov
          forge coverage --report summary

      - name: ‚òÅÔ∏è Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./lcov.info
          flags: foundry

  # ====================================
  # SECURITY ANALYSIS
  # ====================================
  security:
    name: üõ°Ô∏è Security Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: üì¶ Install dependencies
        run: forge install

      - name: üèóÔ∏è Build contracts
        run: forge build

      - name: üîç Install Slither
        run: |
          python3 -m pip install slither-analyzer
          python3 -m pip install solc-select
          solc-select install 0.8.19
          solc-select use 0.8.19

      - name: üêç Run Slither analysis
        run: |
          slither . --print human-summary > slither-report.txt
          slither . --checklist > slither-checklist.txt
          echo "## Slither Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -50 slither-report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: üì§ Upload Slither reports
        uses: actions/upload-artifact@v4
        with:
          name: slither-reports-${{ github.sha }}
          path: |
            slither-report.txt
            slither-checklist.txt

  # ====================================
  # GAS OPTIMIZATION ANALYSIS
  # ====================================
  gas-analysis:
    name: ‚õΩ Gas Optimization Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for comparison

      - name: üõ†Ô∏è Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: üì¶ Install dependencies
        run: forge install

      - name: ‚õΩ Generate current gas snapshot
        run: |
          forge snapshot --optimize --optimize-runs 1000 > current-gas-snapshot.txt
          
      - name: üìä Compare with previous snapshot
        if: github.event_name == 'pull_request'
        run: |
          # Try to get previous snapshot from base branch
          git checkout origin/${{ github.base_ref }} 2>/dev/null || echo "No base branch"
          if [[ -f .gas-snapshot ]]; then
            cp .gas-snapshot previous-gas-snapshot.txt
            git checkout -
            echo "## Gas Usage Comparison" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
            diff previous-gas-snapshot.txt current-gas-snapshot.txt || true >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "No previous gas snapshot found"
            git checkout -
          fi

      - name: üìà Gas usage report
        run: |
          echo "## Current Gas Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 current-gas-snapshot.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: üíæ Update gas snapshot
        if: github.ref == 'refs/heads/main'
        run: |
          cp current-gas-snapshot.txt .gas-snapshot
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .gas-snapshot
          git commit -m "Update gas snapshot [skip ci]" || exit 0
          git push

  # ====================================
  # DEPLOYMENT SIMULATION
  # ====================================
  deployment-simulation:
    name: üöÄ Deployment Simulation
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: üì¶ Install dependencies
        run: forge install

      - name: üß™ Simulate deployment (Anvil)
        run: |
          # Start anvil in background
          anvil --fork-url $MAINNET_RPC_URL > anvil.log 2>&1 &
          ANVIL_PID=$!
          sleep 5
          
          # Run deployment simulation
          forge script script/DeployQuantumNFT.sol --rpc-url http://localhost:8545 --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 --broadcast -v
          
          # Clean up
          kill $ANVIL_PID
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          ROYALTY_RECIPIENT: "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"

  # ====================================
  # AUTOMATED DEPLOYMENT
  # ====================================
  deploy:
    name: üöÄ Deploy to Network
    runs-on: ubuntu-latest
    needs: [test, security, gas-analysis, deployment-simulation]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: üì¶ Install dependencies
        run: forge install

      - name: üöÄ Deploy to ${{ github.event.inputs.deploy_network }}
        run: |
          case "${{ github.event.inputs.deploy_network }}" in
            "sepolia")
              RPC_URL=$SEPOLIA_RPC_URL
              DEPLOYER_KEY=${{ secrets.TESTNET_DEPLOYER_KEY }}
              VERIFY_KEY=$ETHERSCAN_API_KEY
              ;;
            "polygon-mumbai")
              RPC_URL=$MUMBAI_RPC_URL
              DEPLOYER_KEY=${{ secrets.TESTNET_DEPLOYER_KEY }}
              VERIFY_KEY=$POLYGONSCAN_API_KEY
              ;;
            "mainnet")
              RPC_URL=$MAINNET_RPC_URL
              DEPLOYER_KEY=${{ secrets.MAINNET_DEPLOYER_KEY }}
              VERIFY_KEY=$ETHERSCAN_API_KEY
              ;;
            "polygon")
              RPC_URL=$POLYGON_RPC_URL
              DEPLOYER_KEY=${{ secrets.POLYGON_DEPLOYER_KEY }}
              VERIFY_KEY=$POLYGONSCAN_API_KEY
              ;;
          esac
          
          echo "Deploying to ${{ github.event.inputs.deploy_network }}..."
          
          forge script script/DeployQuantumNFT.sol \
            --rpc-url $RPC_URL \
            --private-key $DEPLOYER_KEY \
            --broadcast \
            --verify \
            --etherscan-api-key $VERIFY_KEY \
            -v
        env:
          ROYALTY_RECIPIENT: ${{ secrets.ROYALTY_RECIPIENT }}
          ACTIVATE_MINTING: ${{ secrets.ACTIVATE_MINTING_ON_DEPLOY }}

      - name: üìä Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-${{ github.event.inputs.deploy_network }}-${{ github.sha }}
          path: |
            broadcast/
            deployments/

  # ====================================
  # NOTIFICATION & REPORTING
  # ====================================
  notify:
    name: üì¢ Deployment Notification
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && github.event_name == 'workflow_dispatch'
    
    steps:
      - name: üü¢ Success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Quantum NFT successfully deployed to ${{ github.event.inputs.deploy_network }}!"
          echo "Check the deployment artifacts for contract address and verification details."
          
      - name: üî¥ Failure notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Quantum NFT deployment failed on ${{ github.event.inputs.deploy_network }}"
          echo "Check the logs for detailed error information."

  # ====================================
  # COMPREHENSIVE REPORTING
  # ====================================
  report:
    name: üìã Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [test, advanced-testing, security, gas-analysis]
    if: always()
    
    steps:
      - name: üìä Generate final report
        run: |
          echo "# üß™ Quantum NFT CI/CD Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Advanced Testing: ${{ needs.advanced-testing.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Analysis: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Gas Analysis: ${{ needs.gas-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy.result }}" != "" ]]; then
            echo "- Deployment: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Deployment: Not triggered" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated on $(date) for commit ${{ github.sha }}*" >> $GITHUB_STEP_SUMMARY 